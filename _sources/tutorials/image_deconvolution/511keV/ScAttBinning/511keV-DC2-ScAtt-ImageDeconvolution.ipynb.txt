{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3edcfe0b-24d7-4321-b355-a6dc730c155d",
   "metadata": {
    "tags": []
   },
   "source": [
    "# DC2 Image Analysis, 511 keV, Image Deconvolution\n",
    "\n",
    "updated on 2024-01-30 (the commit 26cfdeacb25335bd511a91c4f8a29bdeb36408f2)\n",
    "\n",
    "This notebook focuses on the image deconvolution with the spacecraft attitude (scatt) binning method for DC2.\n",
    "Using the 511 keV thin disk 3-month simulation data created for DC2, an example of the image analysis will be presented.\n",
    "If you have not run through 511keV-DC2-ScAtt-DataReduction.ipynb, please see it first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e751bbd5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING: version mismatch between CFITSIO header (v4) and linked library (v4.01).\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/06\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:41:37 </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The naima package is not available. Models that depend on it will not be         </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">functions.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py#48\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">48</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">available                                                                         </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:41:37\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The naima package is not available. Models that depend on it will not be        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=868719;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py\u001b\\\u001b[2mfunctions.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=430612;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py#48\u001b\\\u001b[2m48\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mavailable                                                                        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it  </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">functions.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py#69\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">69</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">will not be available.                                                            </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=1266;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py\u001b\\\u001b[2mfunctions.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=828377;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/functions.py#69\u001b\\\u001b[2m69\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mwill not be available.                                                           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:41:38 </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The ebltable package is not available. Models that depend on it will not be     </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/absorption.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">absorption.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/absorption.py#36\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">36</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">available                                                                        </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:41:38\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The ebltable package is not available. Models that depend on it will not be    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=592615;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/absorption.py\u001b\\\u001b[2mabsorption.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=487884;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/functions/functions_1D/absorption.py#36\u001b\\\u001b[2m36\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mavailable                                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m                \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=715098;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=629258;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=356515;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=502226;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=565497;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=461713;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=84453;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=437410;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of F to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of F to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=15358;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=521689;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=256986;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=884611;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">19:41:38 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Starting 3ML!                                                                     </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#35\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">35</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m19:41:38\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Starting 3ML!                                                                    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=535446;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=741506;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#35\u001b\\\u001b[2m35\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> WARNINGs here are </span><span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">NOT</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> errors                                                      </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#36\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">36</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m WARNINGs here are \u001b[0m\u001b[1;31mNOT\u001b[0m\u001b[1;38;5;251m errors                                                     \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=94178;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=451499;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#36\u001b\\\u001b[2m36\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> but are inform you about optional packages that can be installed                  </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#37\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">37</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m but are inform you about optional packages that can be installed                 \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=751666;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=226228;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#37\u001b\\\u001b[2m37\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> </span><span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\"> to disable these messages, turn off start_warning in your config file</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">            </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#40\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">40</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m \u001b[0m\u001b[1;31m to disable these messages, turn off start_warning in your config file\u001b[0m\u001b[1;38;5;251m           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=85570;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=612756;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#40\u001b\\\u001b[2m40\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Multinest minimizer not available                                           </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">minimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py#1357\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1357</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Multinest minimizer not available                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=50968;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py\u001b\\\u001b[2mminimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=509890;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py#1357\u001b\\\u001b[2m1357\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> PyGMO is not available                                                      </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">minimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py#1369\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1369</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m PyGMO is not available                                                     \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=146921;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py\u001b\\\u001b[2mminimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=794948;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/minimizer/minimization.py#1369\u001b\\\u001b[2m1369\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The cthreeML package is not installed. You will not be able to use plugins which  </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#94\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">94</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">require the C/C++ interface (currently HAWC)                                       </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">              </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The cthreeML package is not installed. You will not be able to use plugins which \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=646350;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=265558;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#94\u001b\\\u001b[2m94\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mrequire the C/C++ interface \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mcurrently HAWC\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m              \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Could not import plugin HAWCLike.py. Do you have the relative instrument         </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#144\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">144</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">software installed and configured?                                                </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Could not import plugin HAWCLike.py. Do you have the relative instrument        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=35839;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=46082;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#144\u001b\\\u001b[2m144\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251msoftware installed and configured?                                               \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Could not import plugin FermiLATLike.py. Do you have the relative instrument     </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#144\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">144</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">software installed and configured?                                                </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Could not import plugin FermiLATLike.py. Do you have the relative instrument    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=913803;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=135607;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#144\u001b\\\u001b[2m144\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251msoftware installed and configured?                                               \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> No fermitools installed                                              </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">lat_transient_builder.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py#44\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">44</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m No fermitools installed                                             \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=370360;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py\u001b\\\u001b[2mlat_transient_builder.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=80289;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py#44\u001b\\\u001b[2m44\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable OMP_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal         </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable OMP_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=219211;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=844281;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable MKL_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal         </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable MKL_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=267452;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=556886;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable NUMEXPR_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal     </span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable NUMEXPR_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=28294;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=519854;file:///Users/yoneda/Work/Exp/COSI/cosipy-2/cosipy-2-venv/lib/python3.10/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from histpy import Histogram, HealpixAxis, Axis, Axes\n",
    "from mhealpy import HealpixMap\n",
    "from astropy.coordinates import SkyCoord, cartesian_to_spherical, Galactic\n",
    "\n",
    "from cosipy.response import FullDetectorResponse\n",
    "from cosipy.spacecraftfile import SpacecraftFile\n",
    "from cosipy.ts_map.TSMap import TSMap\n",
    "from cosipy.data_io import UnBinnedData, BinnedData\n",
    "from cosipy.image_deconvolution import SpacecraftAttitudeExposureTable, CoordsysConversionMatrix, DataLoader, ImageDeconvolution\n",
    "\n",
    "# cosipy uses astropy units\n",
    "import astropy.units as u\n",
    "from astropy.units import Quantity\n",
    "from astropy.coordinates import SkyCoord\n",
    "from astropy.time import Time\n",
    "from astropy.table import Table\n",
    "from astropy.io import fits\n",
    "from scoords import Attitude, SpacecraftFrame\n",
    "\n",
    "#3ML is needed for spectral modeling\n",
    "from threeML import *\n",
    "from astromodels import Band\n",
    "\n",
    "#Other standard libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.gridspec import GridSpec \n",
    "\n",
    "import healpy as hp\n",
    "from tqdm.autonotebook import tqdm\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f20cda-81f8-4685-b9c4-f9423e5ebcf7",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 0. Files needed for this notebook\n",
    "\n",
    "From wasabi\n",
    "- cosi-pipeline-public/COSI-SMEX/DC2/Responses/SMEXv12.511keV.HEALPixO4.binnedimaging.imagingresponse.nonsparse_nside16.area.h5\n",
    "\n",
    "From docs/tutorials/image_deconvolution/511keV/ScAttBinning\n",
    "- inputs_511keV_DC2.yaml\n",
    "- imagedeconvolution_parfile_scatt_511keV.yml\n",
    "\n",
    "As outputs from the notebook 511keV-DC2-ScAtt-DataReduction.ipynb\n",
    "- 511keV_scatt_binning_DC2_bkg.hdf5\n",
    "- 511keV_scatt_binning_DC2_event.hdf5\n",
    "- ccm.hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c259412",
   "metadata": {},
   "source": [
    "## 1. Read the response matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "573a7c60",
   "metadata": {},
   "source": [
    "<span style=\"color:red\"> please modify \"path_data\" corresponding to your environment.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fada24bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "path_data = \"path/to/data/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98a778c2-73cf-467b-96b6-affc42f17102",
   "metadata": {},
   "outputs": [],
   "source": [
    "response_path = path_data + \"SMEXv12.511keV.HEALPixO4.binnedimaging.imagingresponse.nonsparse_nside16.area.h5\"\n",
    "\n",
    "response = FullDetectorResponse.open(response_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eab660b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FILENAME: '/Users/yoneda/Work/Exp/COSI/cosipy-2/data_challenge/DC2/prework/data/Responses/SMEXv12.511keV.HEALPixO4.binnedimaging.imagingresponse.nonsparse_nside16.area.h5'\n",
       "AXES:\n",
       "  NuLambda:\n",
       "    DESCRIPTION: 'Location of the simulated source in the spacecraft coordinates'\n",
       "    TYPE: 'healpix'\n",
       "    NPIX: 3072\n",
       "    NSIDE: 16\n",
       "    SCHEME: 'RING'\n",
       "  Ei:\n",
       "    DESCRIPTION: 'Initial simulated energy'\n",
       "    TYPE: 'log'\n",
       "    UNIT: 'keV'\n",
       "    NBINS: 1\n",
       "    EDGES: [509.0 keV, 513.0 keV]\n",
       "  Em:\n",
       "    DESCRIPTION: 'Measured energy'\n",
       "    TYPE: 'log'\n",
       "    UNIT: 'keV'\n",
       "    NBINS: 1\n",
       "    EDGES: [509.0 keV, 513.0 keV]\n",
       "  Phi:\n",
       "    DESCRIPTION: 'Compton angle'\n",
       "    TYPE: 'linear'\n",
       "    UNIT: 'deg'\n",
       "    NBINS: 60\n",
       "    EDGES: [0.0 deg, 3.0 deg, 6.0 deg, 9.0 deg, 12.0 deg, 15.0 deg, 18.0 deg, 21.0 deg, 24.0 deg, 27.0 deg, 30.0 deg, 33.0 deg, 36.0 deg, 39.0 deg, 42.0 deg, 45.0 deg, 48.0 deg, 51.0 deg, 54.0 deg, 57.0 deg, 60.0 deg, 63.0 deg, 66.0 deg, 69.0 deg, 72.0 deg, 75.0 deg, 78.0 deg, 81.0 deg, 84.0 deg, 87.0 deg, 90.0 deg, 93.0 deg, 96.0 deg, 99.0 deg, 102.0 deg, 105.0 deg, 108.0 deg, 111.0 deg, 114.0 deg, 117.0 deg, 120.0 deg, 123.0 deg, 126.0 deg, 129.0 deg, 132.0 deg, 135.0 deg, 138.0 deg, 141.0 deg, 144.0 deg, 147.0 deg, 150.0 deg, 153.0 deg, 156.0 deg, 159.0 deg, 162.0 deg, 165.0 deg, 168.0 deg, 171.0 deg, 174.0 deg, 177.0 deg, 180.0 deg]\n",
       "  PsiChi:\n",
       "    DESCRIPTION: 'Location in the Compton Data Space'\n",
       "    TYPE: 'healpix'\n",
       "    NPIX: 3072\n",
       "    NSIDE: 16\n",
       "    SCHEME: 'RING'\n"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26d6eb3a",
   "metadata": {},
   "source": [
    "## 2. Read binned 511keV binned files (source and background)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "04e15347-6b38-42de-a7c5-cd99b2ae66ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 149 ms, sys: 806 ms, total: 955 ms\n",
      "Wall time: 958 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "#  background \n",
    "data_bkg = BinnedData(\"inputs_511keV_DC2.yaml\")\n",
    "data_bkg.load_binned_data_from_hdf5(\"511keV_scatt_binning_DC2_bkg.hdf5\")\n",
    "\n",
    "##  signal + background\n",
    "data_511keV = BinnedData(\"inputs_511keV_DC2.yaml\")\n",
    "data_511keV.load_binned_data_from_hdf5(\"511keV_scatt_binning_DC2_event.hdf5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a409aa7b-9bd8-443b-be46-ee5a053f8349",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 3. Load the coordsys conversion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "daaf836a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.63 s, sys: 77.8 ms, total: 1.71 s\n",
      "Wall time: 1.72 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "ccm = CoordsysConversionMatrix.open(\"ccm.hdf5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31ec05ad-90b7-4fad-9ad0-98cfd6483d41",
   "metadata": {},
   "source": [
    "## 4. Imaging deconvolution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e88ca7f",
   "metadata": {},
   "source": [
    "### Brief overview of the image deconvolution\n",
    "\n",
    "Basically, we have to maximize the following likelihood function\n",
    "\n",
    "$$\n",
    "\\log L = \\sum_i X_i \\log \\epsilon_i - \\sum_i \\epsilon_i\n",
    "$$\n",
    "\n",
    "$X_i$: detected counts at $i$-th bin ( $i$ : index of the Compton Data Space)\n",
    "\n",
    "$\\epsilon_i = \\sum_j R_{ij} \\lambda_j + b_i$ : expected counts ( $j$ : index of the model space)\n",
    "\n",
    "$\\lambda_j$ : the model map (basically gamma-ray flux at $j$-th pixel)\n",
    "\n",
    "$b_i$ : the background at $i$-th bin\n",
    "\n",
    "$R_{ij}$ : the response matrix\n",
    "\n",
    "Since we have to optimize the flux in each pixel, and the number of parameters is large, we adopt an iterative approach to find a solution of the above equation. The simplest one is the ML-EM (Maximum Likelihood Expectation Maximization) algorithm. It is also known as the Richardson-Lucy algorithm.\n",
    "\n",
    "$$\n",
    "\\lambda_{j}^{k+1} = \\lambda_{j}^{k} + \\delta \\lambda_{j}^{k}\n",
    "$$\n",
    "$$\n",
    "\\delta \\lambda_{j}^{k} = \\frac{\\lambda_{j}^{k}}{\\sum_{i} R_{ij}} \\sum_{i} \\left(\\frac{ X_{i} }{\\epsilon_{i}} - 1 \\right) R_{ij} \n",
    "$$\n",
    "\n",
    "We refer to $\\delta \\lambda_{j}^{k}$ as the delta map.\n",
    "\n",
    "As for now, the two improved algorithms are implemented in COSIpy.\n",
    "\n",
    "- Accelerated ML-EM algorithm (Knoedlseder+99)\n",
    "\n",
    "$$\n",
    "\\lambda_{j}^{k+1} = \\lambda_{j}^{k} + \\alpha^{k} \\delta \\lambda_{j}^{k}\n",
    "$$\n",
    "$$\n",
    "\\alpha^{k} < \\mathrm{max}(- \\lambda_{j}^{k} / \\delta \\lambda_{j}^{k})\n",
    "$$\n",
    "\n",
    "Practically, in order not to accelerate the algorithm excessively, we set the maximum value of $\\alpha$ ($\\alpha_{\\mathrm{max}}$). Then, $\\alpha$ is calculated as:\n",
    "\n",
    "$$\n",
    "\\alpha^{k} = \\mathrm{min}(\\mathrm{max}(- \\lambda_{j}^{k} / \\delta \\lambda_{j}^{k}), \\alpha_{\\mathrm{max}})\n",
    "$$\n",
    "\n",
    "- Noise damping using gaussian smoothing (Knoedlseder+05, Siegert+20)\n",
    "\n",
    "$$\n",
    "\\lambda_{j}^{k+1} = \\lambda_{j}^{k} + \\alpha^{k} \\left[ w_j \\delta \\lambda_{j}^{k} \\right]_{\\mathrm{gauss}}\n",
    "$$\n",
    "$$\n",
    "w_j = \\left(\\sum_{i} R_{ij}\\right)^\\beta\n",
    "$$\n",
    "\n",
    "$\\left[ ... \\right]_{\\mathrm{gauss}}$ means that the differential image is smoothed by a gaussian filter."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a2582e",
   "metadata": {},
   "source": [
    "### 4-1. Prepare DataLoader containing all neccesary datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "de8055f7-4aab-4a17-8751-42493f9e88d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataloader = DataLoader.load(data_511keV.binned_data, \n",
    "                             data_bkg.binned_data, \n",
    "                             response, \n",
    "                             ccm,\n",
    "                             is_miniDC2_format = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "59d48019",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING FutureWarning: Note that _modify_axes() in DataLoader was implemented for a temporary use. It will be removed in the future.\n",
      "\n",
      "\n",
      "WARNING UserWarning: Make sure to perform _modify_axes() only once after the data are loaded.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... checking the axis ScAtt of the event and background files...\n",
      "    --> pass (edges)\n",
      "    --> pass (unit)\n",
      "... checking the axis Em of the event and background files...\n",
      "    --> pass (edges)\n",
      "    --> pass (unit)\n",
      "... checking the axis Phi of the event and background files...\n",
      "    --> pass (edges)\n",
      "    --> pass (unit)\n",
      "... checking the axis PsiChi of the event and background files...\n",
      "    --> pass (edges)\n",
      "    --> pass (unit)\n",
      "...checking the axis Em of the event and response files...\n",
      "    --> pass (edges)\n",
      "...checking the axis Phi of the event and response files...\n",
      "    --> pass (edges)\n",
      "...checking the axis PsiChi of the event and response files...\n",
      "    --> pass (edges)\n",
      "The axes in the event and background files are redefined. Now they are consistent with those of the response file.\n"
     ]
    }
   ],
   "source": [
    "dataloader._modify_axes()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "241505ad",
   "metadata": {},
   "source": [
    "(In the future, we plan to remove the method \"_modify_axes.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a662f5e",
   "metadata": {},
   "source": [
    "### 4-2. Load the response file\n",
    "\n",
    "The response file will be loaded on the CPU memory. It requires a few GB. In the actual COSI satellite analysis, the response could be much larger, perhaps ~1TB wiht finer bin size. \n",
    "\n",
    "So loading it on the memory might be unrealistic in the future. The optimized (lazy) loading would be a next work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ab4b84c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 13.5 s, sys: 1.48 s, total: 15 s\n",
      "Wall time: 15 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "dataloader.load_full_detector_response_on_memory()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bc6a570",
   "metadata": {},
   "source": [
    "Here, we calculate an auxiliary matrix for the deconvolution. Basically, it is a response matrix projected into the model space ($\\sum_{i} R_{ij}$). Currently, it is mandatory to run this command for the image deconvolution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0a5c9a02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... (DataLoader) calculating a projected image response ...\n"
     ]
    }
   ],
   "source": [
    "dataloader.calc_image_response_projected()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1a0269e",
   "metadata": {},
   "source": [
    "### 4-3. Initialize the instance of the image deconvolution class\n",
    "\n",
    "First, we prepare an instance of the ImageDeconvolution class and then register the dataset and parameters for the deconvolution. After that, you can start the calculation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79eb910c",
   "metadata": {},
   "source": [
    "<span style=\"color:red\"> please modify this parameter_filepath corresponding to your environment.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5fa73486",
   "metadata": {},
   "outputs": [],
   "source": [
    "parameter_filepath = \"imagedeconvolution_parfile_scatt_511keV.yml\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4b47308-3e13-400d-bebc-b5d1e093201d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data for image deconvolution was set ->  <cosipy.image_deconvolution.data_loader.DataLoader object at 0x2b65478e0>\n",
      "parameter file for image deconvolution was set ->  imagedeconvolution_parfile_scatt_511keV.yml\n"
     ]
    }
   ],
   "source": [
    "image_deconvolution = ImageDeconvolution()\n",
    "\n",
    "# set dataloader to image_deconvolution\n",
    "image_deconvolution.set_data(dataloader)\n",
    "\n",
    "# set a parameter file for the image deconvolution\n",
    "image_deconvolution.read_parameterfile(parameter_filepath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2345d9d",
   "metadata": {},
   "source": [
    "### Initialize image_deconvolution\n",
    "\n",
    "In this process, a model map is defined following the input parameters, and it is initialized. Also, it prepares ancillary data for the image deconvolution, e.g., the expected counts with the initial model map, gaussian smoothing filter etc.\n",
    "\n",
    "I describe parameters in the parameter file.\n",
    "\n",
    "#### model_property\n",
    "\n",
    "| Name | Unit | Description | Notes |\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| coordinate | str | the coordinate system of the model map | As for now, it must be 'galactic' |\n",
    "| nside | int | NSIDE of the model map | it must be the same as NSIDE of 'lb' axis of the coordinate conversion matrix|\n",
    "| scheme | str | SCHEME of the model map | As for now, it must be 'ring' |\n",
    "| energy_edges | list of float [keV] | The definition of the energy bins of the model map | As for now, it must be the same as that of the response matrix |\n",
    "\n",
    "#### model_initialization\n",
    "\n",
    "| Name | Unit | Description | Notes |\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| algorithm | str | the method name to initialize the model map | As for now, only 'flat' can be used |\n",
    "| parameter_flat:values | list of float [cm-2 s-1 sr-1] | the list of photon fluxes for each energy band | the length of the list should be the same as the length of \"energy_edges\" - 1 |\n",
    "\n",
    "#### deconvolution\n",
    "\n",
    "| Name | Unit | Description | Notes |\n",
    "| :---: | :---: | :---: | :---: |\n",
    "|algorithm | str | the name of the image deconvolution algorithm| As for now, only 'RL' is supported |\n",
    "|||||\n",
    "|parameter_RL:iteration | int | The maximum number of the iteration | |\n",
    "|parameter_RL:acceleration | bool | whether the accelerated ML-EM algorithm (Knoedlseder+99) is used | |\n",
    "|parameter_RL:alpha_max | float | the maximum value for the acceleration parameter | |\n",
    "|parameter_RL:save_results_each_iteration | bool | whether an updated model map, detal map, likelihood etc. are saved at the end of each iteration | |\n",
    "|parameter_RL:response_weighting | bool | whether a delta map is renormalized based on the exposure time on each pixel, namely $w_j = (\\sum_{i} R_{ij})^{\\beta}$ (see Knoedlseder+05, Siegert+20) | |\n",
    "|parameter_RL:response_weighting_index | float | $\\beta$ in the above equation | |\n",
    "|parameter_RL:smoothing | bool | whether a Gaussian filter is used (see Knoedlseder+05, Siegert+20)  | |\n",
    "|parameter_RL:smoothing_FWHM | float, degree | the FWHM of the Gaussian in the filter | |\n",
    "|parameter_RL:background_normalization_fitting | bool | whether the background normalization factor is optimized at each iteration | As for now, the single background normalization factor is used in all of the bins |\n",
    "|parameter_RL:background_normalization_range | list of float | the range of the normalization factor | should be positive |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "879053e3-ac7b-4a0a-ad58-24e3fb137065",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#### Initialization ####\n",
      "1. generating a model map\n",
      "---- parameters ----\n",
      "coordinate: galactic\n",
      "energy_edges:\n",
      "- 509.0\n",
      "- 513.0\n",
      "nside: 16\n",
      "scheme: ring\n",
      "\n",
      "2. initializing the model map ...\n",
      "---- parameters ----\n",
      "algorithm: flat\n",
      "parameter_flat:\n",
      "  values:\n",
      "  - 1e-4\n",
      "\n",
      "3. registering the deconvolution algorithm ...\n",
      "... calculating the expected events with the initial model map ...\n",
      "... calculating the response weighting filter...\n",
      "... calculating the gaussian filter...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "787a76408f87451687d9cad617f808c7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3072 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---- parameters ----\n",
      "algorithm: RL\n",
      "parameter_RL:\n",
      "  acceleration: true\n",
      "  alpha_max: 10.0\n",
      "  background_normalization_fitting: false\n",
      "  background_normalization_range:\n",
      "  - 0.01\n",
      "  - 10.0\n",
      "  iteration: 10\n",
      "  response_weighting: true\n",
      "  response_weighting_index: 0.5\n",
      "  save_results_each_iteration: false\n",
      "  smoothing: true\n",
      "  smoothing_FWHM: 2.0\n",
      "  smoothing_max_sigma: 10.0\n",
      "\n",
      "#### Done ####\n",
      "\n"
     ]
    }
   ],
   "source": [
    "image_deconvolution.initialize()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fa48a9c",
   "metadata": {},
   "source": [
    "### (You can change the parameters as follows)\n",
    "\n",
    "Note that when you modify the parameters, do not forget to run \"initialize\" again!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a658d2a-4dee-4d05-83ae-d7ac06317c73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#### Initialization ####\n",
      "1. generating a model map\n",
      "---- parameters ----\n",
      "coordinate: galactic\n",
      "energy_edges:\n",
      "- 509.0\n",
      "- 513.0\n",
      "nside: 16\n",
      "scheme: ring\n",
      "\n",
      "2. initializing the model map ...\n",
      "---- parameters ----\n",
      "algorithm: flat\n",
      "parameter_flat:\n",
      "  values:\n",
      "  - 1e-4\n",
      "\n",
      "3. registering the deconvolution algorithm ...\n",
      "... calculating the expected events with the initial model map ...\n",
      "... calculating the response weighting filter...\n",
      "... calculating the gaussian filter...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7588d06581354a01a7524559604db3ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3072 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---- parameters ----\n",
      "algorithm: RL\n",
      "parameter_RL:\n",
      "  acceleration: true\n",
      "  alpha_max: 10\n",
      "  background_normalization_fitting: true\n",
      "  background_normalization_range:\n",
      "  - 0.01\n",
      "  - 10.0\n",
      "  iteration: 30\n",
      "  response_weighting: true\n",
      "  response_weighting_index: 0.5\n",
      "  save_results_each_iteration: false\n",
      "  smoothing: true\n",
      "  smoothing_FWHM: 3.0\n",
      "  smoothing_max_sigma: 10.0\n",
      "\n",
      "#### Done ####\n",
      "\n"
     ]
    }
   ],
   "source": [
    "image_deconvolution.override_parameter(\"deconvolution:parameter_RL:iteration = 30\")\n",
    "image_deconvolution.override_parameter(\"deconvolution:parameter_RL:background_normalization_fitting = True\")\n",
    "image_deconvolution.override_parameter(\"deconvolution:parameter_RL:alpha_max = 10\")\n",
    "image_deconvolution.override_parameter(\"deconvolution:parameter_RL:smoothing_FWHM = 3.0\")\n",
    "\n",
    "image_deconvolution.initialize()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f764066e",
   "metadata": {},
   "source": [
    "## 4-5. Start the image deconvolution\n",
    "\n",
    "**With MacBook Pro with M1 Max and 64 GB memory, it takes about 6 minutes for 30 iterations.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a57fbf71-2fcc-48c4-9ac7-4c545dca67c9",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#### Deconvolution Starts ####\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3f9e0f566265430b83a796729b4f80d3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/30 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Iteration 1/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING RuntimeWarning: invalid value encountered in divide\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 2.5039460293538105\n",
      "    loglikelihood: -1563364.0277526558\n",
      "    background_normalization: 1.0048700233481955\n",
      "  Iteration 2/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1519357.4702937151\n",
      "    background_normalization: 0.9944142064277177\n",
      "  Iteration 3/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 2.4670760938135765\n",
      "    loglikelihood: -1499867.5506138196\n",
      "    background_normalization: 0.999275691887223\n",
      "  Iteration 4/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1496920.474980764\n",
      "    background_normalization: 1.0004892236020582\n",
      "  Iteration 5/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 4.546207203696152\n",
      "    loglikelihood: -1490909.3204384344\n",
      "    background_normalization: 0.9998689870447892\n",
      "  Iteration 6/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1490365.0435509903\n",
      "    background_normalization: 0.9995258381190871\n",
      "  Iteration 7/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 2.854692362839457\n",
      "    loglikelihood: -1489307.7214813665\n",
      "    background_normalization: 0.9997388449308033\n",
      "  Iteration 8/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1489058.487761884\n",
      "    background_normalization: 0.9998124108372027\n",
      "  Iteration 9/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 2.2283812062183777\n",
      "    loglikelihood: -1488593.384611151\n",
      "    background_normalization: 0.9997745302553334\n",
      "  Iteration 10/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1488431.7662045578\n",
      "    background_normalization: 0.999764145247152\n",
      "  Iteration 11/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.2705691250781777\n",
      "    loglikelihood: -1488249.8944230902\n",
      "    background_normalization: 0.9997686118565604\n",
      "  Iteration 12/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1488124.8362333952\n",
      "    background_normalization: 0.9997696073518008\n",
      "  Iteration 13/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1488012.3045336306\n",
      "    background_normalization: 0.9997697876916849\n",
      "  Iteration 14/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.2230022900243092\n",
      "    loglikelihood: -1487888.5786615435\n",
      "    background_normalization: 0.9997700189565418\n",
      "  Iteration 15/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1487798.520730182\n",
      "    background_normalization: 0.9997703163980328\n",
      "  Iteration 16/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.8098974214440344\n",
      "    loglikelihood: -1487652.4673017936\n",
      "    background_normalization: 0.999770562358397\n",
      "  Iteration 17/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1487583.1765680623\n",
      "    background_normalization: 0.999771015377049\n",
      "  Iteration 18/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 5.618448128695514\n",
      "    loglikelihood: -1487253.9933618857\n",
      "    background_normalization: 0.9997712604348642\n",
      "  Iteration 19/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1487215.6271944637\n",
      "    background_normalization: 0.9997727102976933\n",
      "  Iteration 20/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 4.541756790045432\n",
      "    loglikelihood: -1487060.3103523117\n",
      "    background_normalization: 0.999772909371205\n",
      "  Iteration 21/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1487034.1422262355\n",
      "    background_normalization: 0.9997739086816684\n",
      "  Iteration 22/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1487009.4576823683\n",
      "    background_normalization: 0.9997741100024176\n",
      "  Iteration 23/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1486986.1429297891\n",
      "    background_normalization: 0.9997742950835806\n",
      "  Iteration 24/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1486964.0949290707\n",
      "    background_normalization: 0.9997744737637747\n",
      "  Iteration 25/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 4.967042011343623\n",
      "    loglikelihood: -1486864.6152302232\n",
      "    background_normalization: 0.9997746469610125\n",
      "  Iteration 26/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1486848.7990036565\n",
      "    background_normalization: 0.9997754874062363\n",
      "  Iteration 27/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.6330713142086324\n",
      "    loglikelihood: -1486824.3117899313\n",
      "    background_normalization: 0.9997756319817698\n",
      "  Iteration 28/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1486810.3517182083\n",
      "    background_normalization: 0.9997758601840663\n",
      "  Iteration 29/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> continue\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.1820824055223498\n",
      "    loglikelihood: -1486794.6074471278\n",
      "    background_normalization: 0.9997759950994234\n",
      "  Iteration 30/30 \n",
      "--> pre-processing\n",
      "--> E-step\n",
      "... skip E-step ...\n",
      "--> M-step\n",
      "--> post-processing\n",
      "... calculating the expected events with the updated model map ...\n",
      "--> checking stopping criteria\n",
      "--> --> stop\n",
      "--> registering results\n",
      "--> showing results\n",
      "    alpha: 1.0\n",
      "    loglikelihood: -1486781.9555685548\n",
      "    background_normalization: 0.9997761488793757\n",
      "#### Done ####\n",
      "\n",
      "CPU times: user 33min 1s, sys: 3min 35s, total: 36min 37s\n",
      "Wall time: 5min 41s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "all_results = image_deconvolution.run_deconvolution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cc64ea8d",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'alpha': <Quantity 2.50394603>,\n",
      "  'background_normalization': 1.0048700233481955,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8a2f0>,\n",
      "  'iteration': 1,\n",
      "  'loglikelihood': -1563364.0277526558,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8a380>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89f00>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9944142064277177,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x10368e1d0>,\n",
      "  'iteration': 2,\n",
      "  'loglikelihood': -1519357.4702937151,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b657bc70>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88850>},\n",
      " {'alpha': <Quantity 2.46707609>,\n",
      "  'background_normalization': 0.999275691887223,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8bd60>,\n",
      "  'iteration': 3,\n",
      "  'loglikelihood': -1499867.5506138196,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ba00>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89990>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 1.0004892236020582,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ad70>,\n",
      "  'iteration': 4,\n",
      "  'loglikelihood': -1496920.474980764,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b6568820>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88430>},\n",
      " {'alpha': <Quantity 4.5462072>,\n",
      "  'background_normalization': 0.9998689870447892,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8afb0>,\n",
      "  'iteration': 5,\n",
      "  'loglikelihood': -1490909.3204384344,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8afe0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89780>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9995258381190871,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8bf40>,\n",
      "  'iteration': 6,\n",
      "  'loglikelihood': -1490365.0435509903,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8b970>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88880>},\n",
      " {'alpha': <Quantity 2.85469236>,\n",
      "  'background_normalization': 0.9997388449308033,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8a410>,\n",
      "  'iteration': 7,\n",
      "  'loglikelihood': -1489307.7214813665,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ac50>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ae30>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9998124108372027,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07790>,\n",
      "  'iteration': 8,\n",
      "  'loglikelihood': -1489058.487761884,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e076d0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07f10>},\n",
      " {'alpha': <Quantity 2.22838121>,\n",
      "  'background_normalization': 0.9997745302553334,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89600>,\n",
      "  'iteration': 9,\n",
      "  'loglikelihood': -1488593.384611151,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ae60>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88340>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.999764145247152,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b896f0>,\n",
      "  'iteration': 10,\n",
      "  'loglikelihood': -1488431.7662045578,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ad10>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8b0d0>},\n",
      " {'alpha': <Quantity 1.27056913>,\n",
      "  'background_normalization': 0.9997686118565604,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07bb0>,\n",
      "  'iteration': 11,\n",
      "  'loglikelihood': -1488249.8944230902,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e05a50>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07670>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997696073518008,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88640>,\n",
      "  'iteration': 12,\n",
      "  'loglikelihood': -1488124.8362333952,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88cd0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b882b0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997697876916849,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8b0a0>,\n",
      "  'iteration': 13,\n",
      "  'loglikelihood': -1488012.3045336306,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8a4a0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89840>},\n",
      " {'alpha': <Quantity 1.22300229>,\n",
      "  'background_normalization': 0.9997700189565418,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8bc10>,\n",
      "  'iteration': 14,\n",
      "  'loglikelihood': -1487888.5786615435,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8aad0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b89540>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997703163980328,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e075e0>,\n",
      "  'iteration': 15,\n",
      "  'loglikelihood': -1487798.520730182,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e05ae0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x10367dbd0>},\n",
      " {'alpha': <Quantity 1.80989742>,\n",
      "  'background_normalization': 0.999770562358397,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b88d30>,\n",
      "  'iteration': 16,\n",
      "  'loglikelihood': -1487652.4673017936,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8a2c0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07880>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.999771015377049,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07df0>,\n",
      "  'iteration': 17,\n",
      "  'loglikelihood': -1487583.1765680623,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07b20>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b6569b10>},\n",
      " {'alpha': <Quantity 5.61844813>,\n",
      "  'background_normalization': 0.9997712604348642,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b8ace0>,\n",
      "  'iteration': 18,\n",
      "  'loglikelihood': -1487253.9933618857,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b6579690>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b029b0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997727102976933,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07c40>,\n",
      "  'iteration': 19,\n",
      "  'loglikelihood': -1487215.6271944637,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e06950>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b024d0>},\n",
      " {'alpha': <Quantity 4.54175679>,\n",
      "  'background_normalization': 0.999772909371205,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b018d0>,\n",
      "  'iteration': 20,\n",
      "  'loglikelihood': -1487060.3103523117,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b6569780>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b000d0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997739086816684,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07460>,\n",
      "  'iteration': 21,\n",
      "  'loglikelihood': -1487034.1422262355,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x373e07700>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b016f0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997741100024176,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02bc0>,\n",
      "  'iteration': 22,\n",
      "  'loglikelihood': -1487009.4576823683,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b00c40>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b01a80>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997742950835806,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b005e0>,\n",
      "  'iteration': 23,\n",
      "  'loglikelihood': -1486986.1429297891,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b013f0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b03ac0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997744737637747,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b00f40>,\n",
      "  'iteration': 24,\n",
      "  'loglikelihood': -1486964.0949290707,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b01150>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b021d0>},\n",
      " {'alpha': <Quantity 4.96704201>,\n",
      "  'background_normalization': 0.9997746469610125,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b00100>,\n",
      "  'iteration': 25,\n",
      "  'loglikelihood': -1486864.6152302232,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b002b0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b020b0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997754874062363,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b03730>,\n",
      "  'iteration': 26,\n",
      "  'loglikelihood': -1486848.7990036565,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b03ca0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02ce0>},\n",
      " {'alpha': <Quantity 1.63307131>,\n",
      "  'background_normalization': 0.9997756319817698,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02fe0>,\n",
      "  'iteration': 27,\n",
      "  'loglikelihood': -1486824.3117899313,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02200>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b035b0>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997758601840663,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b03490>,\n",
      "  'iteration': 28,\n",
      "  'loglikelihood': -1486810.3517182083,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b011b0>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02ad0>},\n",
      " {'alpha': <Quantity 1.18208241>,\n",
      "  'background_normalization': 0.9997759950994234,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b03c10>,\n",
      "  'iteration': 29,\n",
      "  'loglikelihood': -1486794.6074471278,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b01030>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b00c70>},\n",
      " {'alpha': 1.0,\n",
      "  'background_normalization': 0.9997761488793757,\n",
      "  'delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b02e90>,\n",
      "  'iteration': 30,\n",
      "  'loglikelihood': -1486781.9555685548,\n",
      "  'model_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x374b01330>,\n",
      "  'processed_delta_map': <cosipy.image_deconvolution.modelmap.ModelMap object at 0x2b65790c0>}]\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "\n",
    "pprint.pprint(all_results)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d32d0a8",
   "metadata": {},
   "source": [
    "## 5. Analyze the results\n",
    "Examples to see/analyze the results are shown below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f577c7ac",
   "metadata": {},
   "source": [
    "### Log-likelihood\n",
    "\n",
    "Plotting the log-likelihood vs the number of iterations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "445ee3d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, y = [], []\n",
    "\n",
    "for result in all_results:\n",
    "    x.append(result['iteration'])\n",
    "    y.append(result['loglikelihood'])\n",
    "    \n",
    "plt.plot(x, y)\n",
    "plt.grid()\n",
    "plt.xlabel(\"iteration\")\n",
    "plt.ylabel(\"loglikelihood\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f085706",
   "metadata": {},
   "source": [
    "### Alpha (the factor used for the acceleration)\n",
    "\n",
    "Plotting $\\alpha$ vs the number of iterations. $\\alpha$ is a parameter to accelerate the EM algorithm (see the beginning of Section 4). If it is too large, reconstructed images may have artifacts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1695af05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, y = [], []\n",
    "\n",
    "for result in all_results:\n",
    "    x.append(result['iteration'])\n",
    "    y.append(result['alpha'])\n",
    "    \n",
    "plt.plot(x, y)\n",
    "plt.grid()\n",
    "plt.xlabel(\"iteration\")\n",
    "plt.ylabel(\"alpha\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3298aa5",
   "metadata": {},
   "source": [
    "### Background normalization\n",
    "\n",
    "Plotting the background nomalization factor vs the number of iterations. If the background model is accurate and the image is reconstructed perfectly, this factor should be close to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "71ad8d7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, y = [], []\n",
    "\n",
    "for result in all_results:\n",
    "    x.append(result['iteration'])\n",
    "    y.append(result['background_normalization'])\n",
    "    \n",
    "plt.plot(x, y)\n",
    "plt.grid()\n",
    "plt.xlabel(\"iteration\")\n",
    "plt.ylabel(\"background_normalization\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58e0d3a6",
   "metadata": {},
   "source": [
    "### The reconstructed images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "94ab604d-12d9-4f81-b8d1-7dcbe793b6e8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def plot_reconstructed_image(result, source_position = None): # source_position should be (l,b) in degrees\n",
    "    iteration = result['iteration']\n",
    "    image = result['model_map']\n",
    "\n",
    "    for energy_index in range(image.axes['Ei'].nbins):\n",
    "        map_healpxmap = HealpixMap(data = image[:,energy_index], unit = image.unit)\n",
    "\n",
    "        _, ax = map_healpxmap.plot('mollview')        \n",
    "        \n",
    "        _.colorbar.set_label(str(image.unit))\n",
    "        \n",
    "        if source_position is not None:\n",
    "            ax.scatter(source_position[0]*u.deg, source_position[1]*u.deg, transform=ax.get_transform('world'), color = 'red')\n",
    "\n",
    "        plt.title(label = f\"iteration = {iteration}, energy_index = {energy_index} ({image.axes['Ei'].bounds[energy_index][0]}-{image.axes['Ei'].bounds[energy_index][1]})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b8cdf58",
   "metadata": {},
   "source": [
    "Plotting the reconstructed images in all of the energy bands at the 20th iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2769b6e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iteration = 19\n",
    "\n",
    "plot_reconstructed_image(all_results[iteration])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ac96b22",
   "metadata": {},
   "source": [
    "An example to plot the image in the log scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "71f5f43f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 850x540 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iteration_idx = 29\n",
    "\n",
    "result = all_results[iteration_idx]\n",
    "\n",
    "iteration = result['iteration']\n",
    "image = result['model_map']\n",
    "\n",
    "data = image[:,0]\n",
    "data[data <= 0 * data.unit] = 1e-12 * data.unit\n",
    "\n",
    "hp.mollview(data, min = 1e-5, norm ='log', unit = str(data.unit), title = f'511 keV image at {iteration}th iteration', cmap = 'magma')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fd8b4e1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
