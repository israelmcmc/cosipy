{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "74a86fb5-4e54-4e3f-b349-3e60fbdd0279",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Spectral fitting example (GRB)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7df3443-3ce1-43f3-90b5-1bceb7bc9af0",
   "metadata": {},
   "source": [
    "**To run this, you need the following files, which can be downloaded using the first few cells of this notebook:**\n",
    "- orientation file (20280301_3_month.ori)       \n",
    "- binned data (grb_bkg_binned_data.hdf5, grb_binned_data.hdf5, & bkg_binned_data_1s_local.hdf5)     \n",
    "- detector response (SMEXv12.Continuum.HEALPixO3_10bins_log_flat.binnedimaging.imagingresponse.nonsparse_nside8.area.good_chunks_unzip.h5.zip)     \n",
    "\n",
    "**The binned data are simulations of GRB090206620 and albedo photon background produced using the COSI SMEX mass model. The detector response needs to be unzipped before running the notebook.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba543558-7de9-494c-8b72-8cdd368676e9",
   "metadata": {},
   "source": [
    "This notebook fits the spectrum of a GRB simulated using MEGAlib and combined with background.\n",
    "\n",
    "[3ML](https://threeml.readthedocs.io/) is a high-level interface that allows multiple datasets from different instruments to be used coherently to fit the parameters of source model. A source model typically consists of a list of sources with parametrized spectral shapes, sky locations and, for extended sources, shape. Polarization is also possible. A \"coherent\" analysis, in this context, means that the source model parameters are fitted using all available datasets simultanously, rather than performing individual fits and finding a well-suited common model a posteriori. \n",
    "\n",
    "In order for a dataset to be included in 3ML, each instrument needs to provide a \"plugin\". Each plugin is responsible for reading the data, convolving the source model (provided by 3ML) with the instrument response, and returning a likelihood. In our case, we'll compute a binned Poisson likelihood:\n",
    "\n",
    "$$\n",
    "\\log \\mathcal{L}(\\mathbf{x}) = \\sum_i \\log \\frac{\\lambda_i(\\mathbf{x})^{d_i} \\exp (-\\lambda_i)}{d_i!}\n",
    "$$\n",
    "\n",
    "where $d_i$ are the counts on each bin and $\\lambda_i$ are the expected counts given a source model with parameters $\\mathbf{x}$. \n",
    "\n",
    "In this example, we will fit a single point source with a known location. We'll assume the background is known and fixed up to a scaling factor. Finally, we will fit a Band function:\n",
    "\n",
    "$$\n",
    "f(x) = K \\begin{cases} \\left(\\frac{x}{E_{piv}}\\right)^{\\alpha} \\exp \\left(-\\frac{(2+\\alpha)\n",
    "       * x}{x_{p}}\\right) & x \\leq (\\alpha-\\beta) \\frac{x_{p}}{(\\alpha+2)} \\\\ \\left(\\frac{x}{E_{piv}}\\right)^{\\beta}\n",
    "       * \\exp (\\beta-\\alpha)\\left[\\frac{(\\alpha-\\beta) x_{p}}{E_{piv}(2+\\alpha)}\\right]^{\\alpha-\\beta}\n",
    "       * &x>(\\alpha-\\beta) \\frac{x_{p}}{(\\alpha+2)} \\end{cases}\n",
    "$$\n",
    "\n",
    "\n",
    "where $K$ (normalization), $\\alpha$ & $\\beta$ (spectral indeces), and $x_p$ (peak energy) are the free parameters, while $E_{piv}$ is the pivot energy which is fixed (and arbitrary).\n",
    "\n",
    "Considering these assumptions:\n",
    "\n",
    "$$\n",
    "\\lambda_i(\\mathbf{x}) = B*b_i + s_i(\\mathbf{x})\n",
    "$$\n",
    "\n",
    "where $B*b_i$ are the estimated counts due to background in each bin of the Compton data space with $B$ the amplitude and $b_i$ the shape of the background, and $s_i$ are the corresponding expected counts from the source, the goal is then to find the values of $\\mathbf{x} = [K, \\alpha, \\beta, x_p]$ and $B$ that maximize $\\mathcal{L}$. These are the best estimations of the parameters.\n",
    "\n",
    "The final module needs to also fit the time-dependent background, handle multiple point-like and extended sources, as well as all the spectral models supported by 3ML. Eventually, it will also fit the polarization angle. However, this simple example already contains all the necessary pieces to do a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ce42ab82-3bbd-4729-8f84-a4e32eb3bb24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:04:24 </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The naima package is not available. Models that depend on it will not be         </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">functions.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py#48\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">48</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">available                                                                         </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:04:24\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The naima package is not available. Models that depend on it will not be        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=258198;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py\u001b\\\u001b[2mfunctions.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=478015;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py#48\u001b\\\u001b[2m48\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mavailable                                                                        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it  </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">functions.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py#69\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">69</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">will not be available.                                                            </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=322055;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py\u001b\\\u001b[2mfunctions.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=156430;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/functions/functions_1D/functions.py#69\u001b\\\u001b[2m69\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mwill not be available.                                                           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:04:25 </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:04:25\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=427696;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=920737;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=187003;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=664651;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=970697;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=263503;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=507764;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=140382;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of F to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of F to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=410897;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=483212;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> We have set the min_value of K to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1e-99</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> because there was a postive transform   </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">parameter.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">704</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m We have set the min_value of K to \u001b[0m\u001b[1;37m1e-99\u001b[0m\u001b[1;38;5;251m because there was a postive transform  \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=964303;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py\u001b\\\u001b[2mparameter.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=470707;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/astromodels/core/parameter.py#704\u001b\\\u001b[2m704\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:04:25 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Starting 3ML!                                                                     </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#35\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">35</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:04:25\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Starting 3ML!                                                                    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=334693;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=235575;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#35\u001b\\\u001b[2m35\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> WARNINGs here are </span><span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">NOT</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> errors                                                      </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#36\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">36</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m WARNINGs here are \u001b[0m\u001b[1;31mNOT\u001b[0m\u001b[1;38;5;251m errors                                                     \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=995830;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=95677;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#36\u001b\\\u001b[2m36\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> but are inform you about optional packages that can be installed                  </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#37\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">37</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m but are inform you about optional packages that can be installed                 \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=547569;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=324296;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#37\u001b\\\u001b[2m37\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> </span><span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\"> to disable these messages, turn off start_warning in your config file</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">            </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#40\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">40</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m \u001b[0m\u001b[1;31m to disable these messages, turn off start_warning in your config file\u001b[0m\u001b[1;38;5;251m           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=559824;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=851427;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#40\u001b\\\u001b[2m40\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> ROOT minimizer not available                                                </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">minimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1345\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1345</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m ROOT minimizer not available                                               \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=915470;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\u001b\\\u001b[2mminimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=32249;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1345\u001b\\\u001b[2m1345\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Multinest minimizer not available                                           </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">minimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1357\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1357</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Multinest minimizer not available                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=809874;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\u001b\\\u001b[2mminimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=490059;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1357\u001b\\\u001b[2m1357\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> PyGMO is not available                                                      </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">minimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1369\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1369</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m PyGMO is not available                                                     \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=817192;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py\u001b\\\u001b[2mminimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=443308;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/minimizer/minimization.py#1369\u001b\\\u001b[2m1369\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> The cthreeML package is not installed. You will not be able to use plugins which  </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#94\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">94</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">require the C/C++ interface (currently HAWC)                                       </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">              </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m The cthreeML package is not installed. You will not be able to use plugins which \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=844985;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=163953;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#94\u001b\\\u001b[2m94\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mrequire the C/C++ interface \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mcurrently HAWC\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m              \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Could not import plugin HAWCLike.py. Do you have the relative instrument         </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#144\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">144</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">software installed and configured?                                                </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Could not import plugin HAWCLike.py. Do you have the relative instrument        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=871918;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=23540;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#144\u001b\\\u001b[2m144\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251msoftware installed and configured?                                               \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Could not import plugin FermiLATLike.py. Do you have the relative instrument     </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#144\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">144</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">software installed and configured?                                                </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Could not import plugin FermiLATLike.py. Do you have the relative instrument    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=354714;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=655302;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#144\u001b\\\u001b[2m144\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251msoftware installed and configured?                                               \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> No fermitools installed                                              </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">lat_transient_builder.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py#44\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">44</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m No fermitools installed                                             \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=194521;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py\u001b\\\u001b[2mlat_transient_builder.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=717765;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/utils/data_builders/fermi/lat_transient_builder.py#44\u001b\\\u001b[2m44\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable OMP_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal         </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable OMP_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=22466;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=967970;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable MKL_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal         </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable MKL_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal        \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=971686;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=989174;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Env. variable NUMEXPR_NUM_THREADS is not set. Please set it to </span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">1</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> for optimal     </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">__init__.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">387</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">performances in 3ML                                                               </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">               </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m Env. variable NUMEXPR_NUM_THREADS is not set. Please set it to \u001b[0m\u001b[1;37m1\u001b[0m\u001b[1;38;5;251m for optimal    \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=980480;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py\u001b\\\u001b[2m__init__.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=239627;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/__init__.py#387\u001b\\\u001b[2m387\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mperformances in 3ML                                                              \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m               \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from cosipy import COSILike, BinnedData\n",
    "from cosipy.spacecraftfile import SpacecraftFile\n",
    "from cosipy.response.FullDetectorResponse import FullDetectorResponse\n",
    "from cosipy.util import fetch_wasabi_file\n",
    "\n",
    "from scoords import SpacecraftFrame\n",
    "\n",
    "from astropy.time import Time\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from astropy.stats import poisson_conf_interval\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from threeML import Band, PointSource, Model, JointLikelihood, DataList\n",
    "from cosipy import Band_Eflux\n",
    "from astromodels import Parameter\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d1c0168-9823-4eb7-930e-5dc61d6448ca",
   "metadata": {},
   "source": [
    "## Download and read in binned data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc364649-56e4-4bb1-8403-74e90cf3ed05",
   "metadata": {},
   "source": [
    "Define the path to the directory containing the data, detector response, orientation file, and yaml files if they have already been downloaded, or the directory to download the files into"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cdd53b2a-5176-42cf-bb2c-feb3387fc0a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_path = Path(\"/path/to/files\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "463043e4-a0c8-49d7-8bcb-19e8d4d6e978",
   "metadata": {},
   "source": [
    "Download the orientation file (684.38 MB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "027c7744-e631-405f-be40-6c552d9392d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "fetch_wasabi_file('COSI-SMEX/DC2/Data/Orientation/20280301_3_month.ori', output=str(data_path / '20280301_3_month.ori'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "134234d9-8fba-42cb-ab71-dba774221201",
   "metadata": {},
   "source": [
    "Download the binned GRB+background data (75.73 KB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5a05bea9-980e-429e-9375-ceb97532047e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fetch_wasabi_file('COSI-SMEX/cosipy_tutorials/grb_spectral_fit_local_frame/grb_bkg_binned_data.hdf5', output=str(data_path / 'grb_bkg_binned_data.hdf5'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "667a50b3-02c3-4b3c-8d56-607b8fddcb55",
   "metadata": {},
   "source": [
    "Download the binned GRB data (76.90 KB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ff857371-5c1e-4065-93f6-2ae010c7501d",
   "metadata": {},
   "outputs": [],
   "source": [
    "fetch_wasabi_file('COSI-SMEX/cosipy_tutorials/grb_spectral_fit_local_frame/grb_binned_data.hdf5', output=str(data_path / 'grb_binned_data.hdf5'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc399d10-f94c-4008-8f09-ce4aaf664514",
   "metadata": {},
   "source": [
    "Download the binned background data (255.97 MB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a8a453a3-7e01-4c0d-9264-fc22bc29cef0",
   "metadata": {},
   "outputs": [],
   "source": [
    "fetch_wasabi_file('COSI-SMEX/cosipy_tutorials/grb_spectral_fit_local_frame/bkg_binned_data_1s_local.hdf5', output=str(data_path / 'bkg_binned_data_1s_local.hdf5'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32b1b135-2060-4d14-91fb-133b0786c596",
   "metadata": {},
   "source": [
    "Download the response file (839.62 MB). This needs to be unzipped before running the rest of the notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6cb6c65e-2883-4a2d-b0ba-b28834a55bfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "fetch_wasabi_file('COSI-SMEX/DC2/Responses/SMEXv12.Continuum.HEALPixO3_10bins_log_flat.binnedimaging.imagingresponse.nonsparse_nside8.area.good_chunks_unzip.h5.zip', output=str(data_path / 'SMEXv12.Continuum.HEALPixO3_10bins_log_flat.binnedimaging.imagingresponse.nonsparse_nside8.area.good_chunks_unzip.h5.zip'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d898bbd7-9ed0-4a27-bd5a-67414178733d",
   "metadata": {},
   "source": [
    "Read in the spacecraft orientation file & select the beginning and end times of the GRB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed2c03a0-63e3-4044-9e16-50f0f17996af",
   "metadata": {},
   "outputs": [],
   "source": [
    "ori = SpacecraftFile.parse_from_file(data_path / \"20280301_3_month.ori\")\n",
    "tmin = Time(1842597410.0,format = 'unix')\n",
    "tmax = Time(1842597450.0,format = 'unix')\n",
    "sc_orientation = ori.source_interval(tmin, tmax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f579870f-c854-450d-84e8-f1d5ef0753d1",
   "metadata": {},
   "source": [
    "Create BinnedData objects for the GRB only, GRB+background, and background only. The GRB only simulation is not used for the spectral fit, but can be used to compare the fitted spectrum to the source simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b5faaa1-1874-4d43-a6ae-7e1b0aaabb26",
   "metadata": {},
   "outputs": [],
   "source": [
    "grb = BinnedData(data_path / \"grb.yaml\")\n",
    "grb_bkg = BinnedData(data_path / \"grb.yaml\")\n",
    "bkg = BinnedData(data_path / \"background.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf8b5ab1-7452-493e-b516-73fa72e455e5",
   "metadata": {},
   "source": [
    "Load binned .hdf5 files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "620159d2-f01a-453e-9e4c-075c99740086",
   "metadata": {},
   "outputs": [],
   "source": [
    "grb.load_binned_data_from_hdf5(binned_data=data_path / \"grb_binned_data.hdf5\")\n",
    "grb_bkg.load_binned_data_from_hdf5(binned_data=data_path / \"grb_bkg_binned_data.hdf5\")\n",
    "bkg.load_binned_data_from_hdf5(binned_data=data_path / \"bkg_binned_data_1s_local.hdf5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6bdaee8-45d7-41df-9835-413c1e397c12",
   "metadata": {},
   "source": [
    "Define the path to the detector response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "acccab93-7f9c-4167-a8f9-eedcf74b8a05",
   "metadata": {},
   "outputs": [],
   "source": [
    "dr = str(data_path / \"SMEXv12.Continuum.HEALPixO3_10bins_log_flat.binnedimaging.imagingresponse.nonsparse_nside8.area.good_chunks_unzip.h5\") # path to detector response"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31b5dbd7-8a50-43db-af66-7b8601f7e2fd",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Perform spectral fit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2210f6ff-c988-455a-be15-882d0b795072",
   "metadata": {},
   "source": [
    "Define time window of binned background simulation to use for background model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a29ec8c4-edea-40bf-8a3e-8038ba47bf8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg_tmin = 1842597310.0\n",
    "bkg_tmax = 1842597550.0\n",
    "bkg_min = np.where(bkg.binned_data.axes['Time'].edges.value == bkg_tmin)[0][0]\n",
    "bkg_max = np.where(bkg.binned_data.axes['Time'].edges.value == bkg_tmax)[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7441f3f1-ebe6-467f-b8ab-1baa70f20b15",
   "metadata": {},
   "source": [
    "Set background parameter, which is used to fit the amplitude of the background, and instantiate the COSI 3ML plugin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a9f21e74-5f62-4030-9815-6c77ebaab16f",
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg_par = Parameter(\"background_cosi\",                                                                          # background parameter\n",
    "                    0.1,                                                                                        # initial value of parameter\n",
    "                    min_value=0,                                                                                # minimum value of parameter\n",
    "                    max_value=5,                                                                                # maximum value of parameter\n",
    "                    delta=1e-3,                                                                                 # initial step used by fitting engine\n",
    "                    desc=\"Background parameter for cosi\")\n",
    "\n",
    "cosi = COSILike(\"cosi\",                                                                                         # COSI 3ML plugin\n",
    "                dr = dr,                                                                                        # detector response\n",
    "                data = grb_bkg.binned_data.project('Em', 'Phi', 'PsiChi'),                                      # data (source+background)\n",
    "                bkg = bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em', 'Phi', 'PsiChi'),    # background model \n",
    "                sc_orientation = sc_orientation,                                                                # spacecraft orientation\n",
    "                nuisance_param = bkg_par)                                                                       # background parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6d55283-abb0-4295-9e5c-80a5c717f0ba",
   "metadata": {},
   "source": [
    "Define a point source at the known location with a Band function spectrum and add it to the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "98b2d026-c24d-4cfe-8b7b-41415fce5d16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... Calculating point source responses ...\n",
      "Now converting to the Spacecraft frame...\n",
      "Conversion completed!\n",
      "--> done (source name : source)\n",
      "--> all done\n"
     ]
    }
   ],
   "source": [
    "l = 93.\n",
    "b = -53.\n",
    "\n",
    "alpha = -1                                       # Setting parameters to something reasonable helps the fitting to converge\\n\",\n",
    "beta = -3\n",
    "xp = 450. * u.keV\n",
    "piv = 500. * u.keV\n",
    "K = 1 / u.cm / u.cm / u.s / u.keV\n",
    "\n",
    "spectrum = Band()\n",
    "\n",
    "spectrum.beta.min_value = -15.0\n",
    "\n",
    "spectrum.alpha.value = alpha\n",
    "spectrum.beta.value = beta\n",
    "spectrum.xp.value = xp.value\n",
    "spectrum.K.value = K.value\n",
    "spectrum.piv.value = piv.value\n",
    "\n",
    "spectrum.xp.unit = xp.unit\n",
    "spectrum.K.unit = K.unit\n",
    "spectrum.piv.unit = piv.unit\n",
    "\n",
    "source = PointSource(\"source\",                     # Name of source (arbitrary, but needs to be unique)\n",
    "                     l = l,                        # Longitude (deg)\n",
    "                     b = b,                        # Latitude (deg)\n",
    "                     spectral_shape = spectrum)    # Spectral model\n",
    "\n",
    "# Optional: free the position parameters\n",
    "#source.position.l.free = True\n",
    "#source.position.b.free = True\n",
    "\n",
    "model = Model(source)                              # Model with single source. If we had multiple sources, we would do Model(source1, source2, ...)\n",
    "\n",
    "# Optional: if you want to call get_log_like manually, then you also need to set the model manually\n",
    "# 3ML does this internally during the fit though\n",
    "cosi.set_model(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27ded6d5-4551-4623-8483-b3f4e8b02040",
   "metadata": {},
   "source": [
    "Gather all plugins and combine with the model in a JointLikelihood object, then perform maximum likelihood fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d56d3ad6-7226-437a-a037-57fbcd80d196",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:04:56 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/classicMLE/joint_likelihood.py#1042\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1042</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:04:56\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=963889;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=362192;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/classicMLE/joint_likelihood.py#1042\u001b\\\u001b[2m1042\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Adding 1e-12 to each bin of the expectation to avoid log-likelihood = -inf.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">12:05:22 </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">WARNING </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> get_number_of_data_points not implemented, values for statistical        </span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/plugin_prototype.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">plugin_prototype.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/plugin_prototype.py#128\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">128</span></a>\n",
       "<span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span>         <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">measurements such as AIC or BIC are unreliable                            </span><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                       </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m12:05:22\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;134mWARNING \u001b[0m \u001b[1;38;5;251m get_number_of_data_points not implemented, values for statistical       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=395184;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/plugin_prototype.py\u001b\\\u001b[2mplugin_prototype.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=957324;file:///Users/eneights/opt/anaconda3/envs/cosipy/lib/python3.9/site-packages/threeML/plugin_prototype.py#128\u001b\\\u001b[2m128\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[38;5;46m         \u001b[0m         \u001b[1;38;5;251mmeasurements such as AIC or BIC are unreliable                           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b[2m                       \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.K</th>\n",
       "      <td>(3.10 -0.20 +0.21) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.alpha</th>\n",
       "      <td>(-2.8 +/- 0.5) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.xp</th>\n",
       "      <td>(4.75 +/- 0.05) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.beta</th>\n",
       "      <td>-6.8 +/- 1.2</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>background_cosi</th>\n",
       "      <td>(1.65 +/- 0.13) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "source.spectrum.main.Band.K      (3.10 -0.20 +0.21) x 10^-2  1 / (cm2 keV s)\n",
       "source.spectrum.main.Band.alpha      (-2.8 +/- 0.5) x 10^-1                 \n",
       "source.spectrum.main.Band.xp         (4.75 +/- 0.05) x 10^2              keV\n",
       "source.spectrum.main.Band.beta                 -6.8 +/- 1.2                 \n",
       "background_cosi                     (1.65 +/- 0.13) x 10^-1                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table11190048368\">\n",
       "<tr><td>1.00</td><td>0.97</td><td>-0.37</td><td>0.20</td><td>-0.00</td></tr>\n",
       "<tr><td>0.97</td><td>1.00</td><td>-0.16</td><td>0.18</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.37</td><td>-0.16</td><td>1.00</td><td>-0.18</td><td>-0.02</td></tr>\n",
       "<tr><td>0.20</td><td>0.18</td><td>-0.18</td><td>1.00</td><td>0.00</td></tr>\n",
       "<tr><td>-0.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.97 -0.37  0.20 -0.00\n",
       " 0.97  1.00 -0.16  0.18 -0.00\n",
       "-0.37 -0.16  1.00 -0.18 -0.02\n",
       " 0.20  0.18 -0.18  1.00  0.00\n",
       "-0.00 -0.00 -0.02  0.00  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cosi</th>\n",
       "      <td>42920.049336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>42920.049336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "cosi       42920.049336\n",
       "total      42920.049336"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>85838.098672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>85840.098672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC          85838.098672\n",
       "BIC          85840.098672"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(                                      value  negative_error  positive_error  \\\n",
       " source.spectrum.main.Band.K        0.030995       -0.001939        0.002116   \n",
       " source.spectrum.main.Band.alpha   -0.276632       -0.050195        0.049825   \n",
       " source.spectrum.main.Band.xp     474.650732       -4.896060        4.873162   \n",
       " source.spectrum.main.Band.beta    -6.756966       -1.215124        1.201150   \n",
       " background_cosi                    0.164969       -0.012573        0.012434   \n",
       " \n",
       "                                     error             unit  \n",
       " source.spectrum.main.Band.K      0.002027  1 / (cm2 keV s)  \n",
       " source.spectrum.main.Band.alpha  0.050010                   \n",
       " source.spectrum.main.Band.xp     4.884611              keV  \n",
       " source.spectrum.main.Band.beta   1.208137                   \n",
       " background_cosi                  0.012504                   ,\n",
       "        -log(likelihood)\n",
       " cosi       42920.049336\n",
       " total      42920.049336)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plugins = DataList(cosi) # If we had multiple instruments, we would do e.g. DataList(cosi, lat, hawc, ...)\n",
    "\n",
    "like = JointLikelihood(model, plugins, verbose = False)\n",
    "\n",
    "like.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44542198-aba8-4a37-b9d0-31930718c2bb",
   "metadata": {},
   "source": [
    "## Error propagation and plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ad20f51-3d3f-43e1-a6a3-037bf3ee9f8f",
   "metadata": {},
   "source": [
    "Define Band function spectrum injected into MEGAlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "02e57ec8-4459-4f99-b62f-73a63aba83f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_inj = -0.360\n",
    "beta_inj = -11.921\n",
    "E0_inj = 288.016 * u.keV\n",
    "xp_inj = E0_inj * (alpha_inj + 2)\n",
    "piv_inj = 1. * u.keV\n",
    "K_inj = 0.283 / u.cm / u.cm / u.s / u.keV\n",
    "\n",
    "spectrum_inj = Band()\n",
    "\n",
    "spectrum_inj.beta.min_value = -15.0\n",
    "\n",
    "spectrum_inj.alpha.value = alpha_inj\n",
    "spectrum_inj.beta.value = beta_inj\n",
    "spectrum_inj.xp.value = xp_inj.value\n",
    "spectrum_inj.K.value = K_inj.value\n",
    "spectrum_inj.piv.value = piv_inj.value\n",
    "\n",
    "spectrum_inj.xp.unit = xp_inj.unit\n",
    "spectrum_inj.K.unit = K_inj.unit\n",
    "spectrum_inj.piv.unit = piv_inj.unit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d626f871-fbdf-40b8-b865-140e3ea4b5c3",
   "metadata": {},
   "source": [
    "The summary of the results above tell you the optimal values of the parameters, as well as the errors. Propogate the errors to the \"evaluate_at\" method of the spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4e25c609-e754-43b8-8ea6-0a0a90811cda",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.K</th>\n",
       "      <td>(3.10 -0.20 +0.21) x 10^-2</td>\n",
       "      <td>1 / (cm2 keV s)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.alpha</th>\n",
       "      <td>(-2.8 +/- 0.5) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.xp</th>\n",
       "      <td>(4.75 +/- 0.05) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Band.beta</th>\n",
       "      <td>-6.8 +/- 1.2</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>background_cosi</th>\n",
       "      <td>(1.65 +/- 0.13) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "source.spectrum.main.Band.K      (3.10 -0.20 +0.21) x 10^-2  1 / (cm2 keV s)\n",
       "source.spectrum.main.Band.alpha      (-2.8 +/- 0.5) x 10^-1                 \n",
       "source.spectrum.main.Band.xp         (4.75 +/- 0.05) x 10^2              keV\n",
       "source.spectrum.main.Band.beta                 -6.8 +/- 1.2                 \n",
       "background_cosi                     (1.65 +/- 0.13) x 10^-1                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table11190019312\">\n",
       "<tr><td>1.00</td><td>0.97</td><td>-0.37</td><td>0.20</td><td>-0.00</td></tr>\n",
       "<tr><td>0.97</td><td>1.00</td><td>-0.16</td><td>0.18</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.37</td><td>-0.16</td><td>1.00</td><td>-0.18</td><td>-0.02</td></tr>\n",
       "<tr><td>0.20</td><td>0.18</td><td>-0.18</td><td>1.00</td><td>0.00</td></tr>\n",
       "<tr><td>-0.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.97 -0.37  0.20 -0.00\n",
       " 0.97  1.00 -0.16  0.18 -0.00\n",
       "-0.37 -0.16  1.00 -0.18 -0.02\n",
       " 0.20  0.18 -0.18  1.00  0.00\n",
       "-0.00 -0.00 -0.02  0.00  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cosi</th>\n",
       "      <td>42920.049336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>42920.049336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "cosi       42920.049336\n",
       "total      42920.049336"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>85838.098672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>85840.098672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC          85838.098672\n",
       "BIC          85840.098672"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "  * source (point source):\n",
      "    * position:\n",
      "      * l:\n",
      "        * value: 93.0\n",
      "        * desc: Galactic longitude\n",
      "        * min_value: 0.0\n",
      "        * max_value: 360.0\n",
      "        * unit: deg\n",
      "        * is_normalization: false\n",
      "      * b:\n",
      "        * value: -53.0\n",
      "        * desc: Galactic latitude\n",
      "        * min_value: -90.0\n",
      "        * max_value: 90.0\n",
      "        * unit: deg\n",
      "        * is_normalization: false\n",
      "      * equinox: J2000\n",
      "    * spectrum:\n",
      "      * main:\n",
      "        * Band:\n",
      "          * K:\n",
      "            * value: 0.030994516909178687\n",
      "            * desc: Differential flux at the pivot energy\n",
      "            * min_value: 1.0e-99\n",
      "            * max_value: null\n",
      "            * unit: keV-1 s-1 cm-2\n",
      "            * is_normalization: true\n",
      "          * alpha:\n",
      "            * value: -0.27663221293105034\n",
      "            * desc: low-energy photon index\n",
      "            * min_value: -1.5\n",
      "            * max_value: 3.0\n",
      "            * unit: ''\n",
      "            * is_normalization: false\n",
      "          * xp:\n",
      "            * value: 474.6507320770641\n",
      "            * desc: peak in the x * x * N (nuFnu if x is a energy)\n",
      "            * min_value: 10.0\n",
      "            * max_value: null\n",
      "            * unit: keV\n",
      "            * is_normalization: false\n",
      "          * beta:\n",
      "            * value: -6.756965748051311\n",
      "            * desc: high-energy photon index\n",
      "            * min_value: -15.0\n",
      "            * max_value: -1.6\n",
      "            * unit: ''\n",
      "            * is_normalization: false\n",
      "          * piv:\n",
      "            * value: 500.0\n",
      "            * desc: pivot energy\n",
      "            * min_value: null\n",
      "            * max_value: null\n",
      "            * unit: keV\n",
      "            * is_normalization: false\n",
      "        * polarization: {}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "results = like.results\n",
    "\n",
    "print(results.display())\n",
    "\n",
    "parameters = {par.name:results.get_variates(par.path)\n",
    "              for par in results.optimized_model[\"source\"].parameters.values()\n",
    "              if par.free}\n",
    "\n",
    "results_err = results.propagate(results.optimized_model[\"source\"].spectrum.main.shape.evaluate_at, **parameters)\n",
    "\n",
    "print(results.optimized_model[\"source\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eaec533-b5b3-45c4-94df-75453e2df3bf",
   "metadata": {},
   "source": [
    "Evaluate the flux and errors at a range of energies for the fitted and injected spectra, and the simulated source flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cc7d6f50-06cd-450a-83d9-115b67d83b30",
   "metadata": {},
   "outputs": [],
   "source": [
    "energy = np.geomspace(100*u.keV,10*u.MeV).to_value(u.keV)\n",
    "\n",
    "flux_lo = np.zeros_like(energy)\n",
    "flux_median = np.zeros_like(energy)\n",
    "flux_hi = np.zeros_like(energy)\n",
    "flux_inj = np.zeros_like(energy)\n",
    "\n",
    "for i, e in enumerate(energy):\n",
    "    flux = results_err(e)\n",
    "    flux_median[i] = flux.median\n",
    "    flux_lo[i], flux_hi[i] = flux.equal_tail_interval(cl=0.68)\n",
    "    flux_inj[i] = spectrum_inj.evaluate_at(e)\n",
    "    \n",
    "binned_energy_edges = grb.binned_data.axes['Em'].edges.value\n",
    "binned_energy = np.array([])\n",
    "bin_sizes = np.array([])\n",
    "\n",
    "for i in range(len(binned_energy_edges)-1):\n",
    "    binned_energy = np.append(binned_energy, (binned_energy_edges[i+1] + binned_energy_edges[i]) / 2)\n",
    "    bin_sizes = np.append(bin_sizes, binned_energy_edges[i+1] - binned_energy_edges[i])\n",
    "\n",
    "expectation = cosi._expected_counts['source']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb8c4aa-ef51-4f19-93dc-2ac7d7d2f189",
   "metadata": {},
   "source": [
    "Plot the fitted and injected spectra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f8dbd36f-4b16-4bec-8835-8f6f876ab169",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x29adcdf10>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy, energy*energy*flux_median, label = \"Best fit\")\n",
    "ax.fill_between(energy, energy*energy*flux_lo, energy*energy*flux_hi, alpha = .5, label = \"Best fit (errors)\")\n",
    "ax.plot(energy, energy*energy*flux_inj, color = 'black', ls = \":\", label = \"Injected\")\n",
    "\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "\n",
    "ax.set_xlabel(\"Energy (keV)\")\n",
    "ax.set_ylabel(r\"$E^2 \\frac{dN}{dE}$ (keV cm$^{-2}$ s$^{-1}$)\")\n",
    "\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20a08b36-44d2-4fef-a82e-def1dfd7b9d9",
   "metadata": {},
   "source": [
    "Plot the fitted spectrum convolved with the response, as well as the simulated source counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d1dd8d1-f86d-4e63-8286-db1d5bc14b04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x29bdaa1f0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_poisson_error = np.zeros((2,len(expectation.project('Em').todense().contents)))\n",
    "fit_gaussian_error = np.zeros(len(expectation.project('Em').todense().contents))\n",
    "inj_poisson_error = np.zeros((2,len(grb.binned_data.project('Em').todense().contents)))\n",
    "inj_gaussian_error = np.zeros(len(grb.binned_data.project('Em').todense().contents))\n",
    "\n",
    "for i, counts in enumerate(expectation.project('Em').todense().contents):\n",
    "    if counts > 5:\n",
    "        fit_gaussian_error[i] = np.sqrt(counts)\n",
    "    else:\n",
    "        poisson_error = poisson_conf_interval(counts, interval=\"frequentist-confidence\", sigma=1)\n",
    "        fit_poisson_error[0][i] = poisson_error[0]\n",
    "        fit_poisson_error[1][i] = poisson_error[1]\n",
    "\n",
    "for i, counts in enumerate(grb.binned_data.project('Em').todense().contents):\n",
    "    if counts > 5:\n",
    "        inj_gaussian_error[i] = np.sqrt(counts)\n",
    "    else:\n",
    "        poisson_error = poisson_conf_interval(counts, interval=\"frequentist-confidence\", sigma=1)\n",
    "        inj_poisson_error[0][i] = poisson_error[0]\n",
    "        inj_poisson_error[1][i] = poisson_error[1]\n",
    "        \n",
    "fig,ax = plt.subplots()\n",
    "\n",
    "ax.stairs(expectation.project('Em').todense().contents, binned_energy_edges, color='purple', label = \"Best fit convolved with response\")\n",
    "ax.errorbar(binned_energy, expectation.project('Em').todense().contents, yerr=fit_poisson_error, color='purple', linewidth=0, elinewidth=1)\n",
    "ax.errorbar(binned_energy, expectation.project('Em').todense().contents, yerr=fit_gaussian_error, color='purple', linewidth=0, elinewidth=1)\n",
    "ax.stairs(grb.binned_data.project('Em').todense().contents, binned_energy_edges, color = 'black', ls = \":\", label = \"Source counts\")\n",
    "ax.errorbar(binned_energy, grb.binned_data.project('Em').todense().contents, yerr=inj_poisson_error, color='black', linewidth=0, elinewidth=1)\n",
    "ax.errorbar(binned_energy, grb.binned_data.project('Em').todense().contents, yerr=inj_gaussian_error, color='black', linewidth=0, elinewidth=1)\n",
    "\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "\n",
    "ax.set_xlabel(\"Energy (keV)\")\n",
    "ax.set_ylabel(\"Counts\")\n",
    "\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00234bec-2a9f-4557-8a41-0d1a9b71e9c9",
   "metadata": {},
   "source": [
    "Plot the fitted spectrum convolved with the response plus the fitted background, as well as the simulated source+background counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "06df3b27-d2ed-4214-bda7-d4fda667e145",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2af24a160>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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8d133xmDBw82DMMw1q1bZ/Tp08fymubOnWvcdttthmEYxsMPP2zcddddhmEYxuOPP27cfvvtljyjR482vvjiC8MwDGPChAnG999/b8k+ceJE45NPPjHKy8sNX19fY8OGDYZhGMYHH3xgAJb34GSLFi0yHnnkEcMwDOO8884zhgwZYuzZs8fYu3ev0bt3b8MwDGPDhg1GdHS0YRiGkZqaari7u9fpY8yYMcb06dONqqoqo7S01OjVq5fx008/nXKs1NRUAzDeffddy32new3x8fFGnz59jOrqasMwDCM/P9+orq629LFq1SrDMAzj559/Nry8vIzi4mJj586dhpeXl5GRkWEYhmEsWbLEmDx5smEYhrFy5UrDzc3NOHDggGEYhnHfffcZ8+bNMwzDMO68807j8ccft2TKy8uzvPePPfaY5f5HH33UuPPOO0/7uurL9Mf3CzCKioost93d3Y3U1NTTvt4/mj17thEZGWkUFRUZVVVVxtSpU40nnnjCMAzDyM3NNWpqaiyZfHx8jOPHjzf4dX3i8/D0008bo0ePtrz2L774whg4cKBRXFxsVFdXG5dffrnla2DDhg2GjY2NsXnzZsMwDKOiosIICAgw1q9fbxiGYWzevNnw9vau9/UXFRUZJ3+LP91npylfw3/8nifWa/076w3AWP/O+hbp78TPz8b8nGstmlTdgjz6eDAvbl6TnlNSWEJmRiZ+/n44uza807FHn8bNj/joo48YMGAAVVVV3HLLLdx3330888wzfPbZZ2zdupXo6Gigdt2HE5fOjh8/nr/85S9ceeWVTJgwgaioqCa9jqZKTEykqqqKGTNmWO7z8PCgqKiI3377jZtuugmA8PBwRo4cyQ8//MA111wDYJlj07dvX+zs7MjOzsbf35/p06fzzjvvcPfdd7Ny5UpuuOEGoHakb+bMmXTr1g2AW2+9tc4u0CfMnj2b8847j2XLlpGenk5SUhKTJk2ipKSE7777jsOHD1vaFhcXs3fvXkJDQ3FycmLs2LEAzJgxg3nz6v8aiImJ4cEHH2T+/PnY29szY8YMYmNjsbGxISYmptHv3dVXX42trS2Ojo6WUYbhw4ef0s7BwcHynjX0Gi688EIqKyu58cYbGTduHFOmTKFTp9rB486dO3P99dcDtXsIent7s337duLi4rjkkkss+x/ddtttLFmyxDKyMHLkSIKCgoDakbETo6yjR4/mnnvuoaSkhDFjxlhe92effUZhYSEfffQRAMePH7ecev2j02Xy9fVt1PsXEhJy2tf7R3/+858tixDeeOONvPTSS9x7772kpqYyc+ZMMjIysLOzIzc3l7S0NCoqKur9uj5h8eLF+Pr68s0331g2udywYQMzZszA2bn28z979mwee+wxy3N69+7NyJEjgdrPTefOnS27jY8cOZKePXuyY8eORm37UN9n5+jRo43+GhZpLWkZabzP+0zMmGjavp4qiFqQvZN9k/8jj5ccx6mrEx59Pejs3LlF89jZ2TF9+nTuuecennnmGQzDYNGiRdx4442ntF22bBm7d+9mw4YNzJ49m5kzZ3Lvvfe2aJ7GOPED9Y+X9558++T1mmxtbS3zKm644QZuvvlm5s2bx9q1a3nuuecsfTbU3wl+fn4MHjyYL774gu3bt3P99ddjZ2dHWVkZNjY2/O9//8Pe3r7Oc7Zv397o1zZ8+HB27drFF198wfjx44mJibEs1z9r1qxG93O61/9Hzs7OltdZU1Nz2tcAsHv3br7//ns2bNjA//3f/7Fp0ybs7Or/9mBjY3PKe/rH9/N0GadPn84FF1zAf//7X5YvX85zzz3HunXrMAyDl156qc7O2E1R3/+nra0t1dXVltsnTou5ubnV+3pP7NDdmONcffXVPP3001x22WUA9OjRg/Ly8jNelj58+HC+/vprUlNT6dOnD1D/1+fJTl4V+nRtbWxssLOzq/f1nqy+/xdDp8ekDagxaqimmhrDvCuuNYeog/vuu+8sOwxPmzaNl156iaNHjwK18za2bdsGwN69e+nfvz933HEHt956K1u2bAHA1dW13vk2jdHQcyMiIujcuXOdpdpzc3NxdXUlKiqKN998E4B9+/bx448/MmLEiDMeb9iwYdTU1HDvvfdy0UUX0aNHDwAuuugi3n//fYqKigB47bXXTjsic+ONN/Lvf/+bt956izlz5gDg4uLCqFGjWLp0qaXdoUOHyMjIoE+fPpSVlbFp0yagdnTudK+5c+fODB06lCVLlljmSCUkJLBp0ybGjRt3SntXV1dKS0tbZCJtQ68hJyeHkpISJkyYwD/+8Q969epFQkICUDtSc2KS96+//kp2djYDBw5k/PjxrFu3zrIB8yuvvML48ePPWBAkJyfTs2dPZs2axZNPPmn5Ops2bRrLli2jtLR27ZTS0lJ2795dbx+ny/RHoaGh/PLLLwB88sknlqstG3q9f/Thhx9SUlJCdXU1K1eutHzdHDt2jF69egG189eOHau9MuZ0X9cnTJw4kTfeeINLLrmE3377DYBx48bx4YcfUlpaSk1NDW+//fZp378+ffpQUVFhmTf1008/ceTIESIjI/H29qaqqorExEQA3nrrrdP288c+G/s1LNJaggOCmclMggOCTcuggshk5RXlZJNNeUXLbex65ZVXEhUVRf/+/dmzZw/PP/88ANdffz3XXXcdY8eOZdCgQURFRbFhwwYA/u///o/+/ftz3nnn8fbbb1tGLubNm8ejjz562onRDWnouXZ2dnz++ee89tprlom5H3/8MQDvvvsu77zzDoMGDWL69Om88cYbBAQENOqYN9xwA6+++qrldBnApEmTuP766xk+fDiRkZEUFhby+OOP1/v8Sy+9lF9++QUfHx/69etnuf/dd99lz549REZGEhkZyfTp08nLy6NLly785z//4fbbb2fIkCH8+uuvBAYGnjbfRRddxJEjRxgxYgQ2NjZER0cTFhZmOZ13sh49ejBz5kzLxOSzdbrXkJ6ezkUXXcTAgQOJjIxkwIABTJo0CQB3d3dSUlIYOnQoN9xwA++99x7Ozs7079+ff/7zn0yYMIGBAweyefNmXn311TNm+PDDDxk4cCDnnXceV199tWXC8f33309UVBRDhw5l4MCBDBs2zFIw/NHpMv3Rc889x+23386IESOIj4/H3d0doMHX+0ejR4/msssuo3///nTv3p0FCxYA8Pzzz3P55ZczcuRItm/fbvk/b+jr+uQ+//Of/zB9+nR+/vlnpk2bxsSJExk0aBDjxo0jNDQUN7f615Dp3LkzH3/8MX//+98ZOHAgf/nLX/jwww9xdnbGzs6OF154gUmTJjF69GjLBPAzaerXsEhHZWNovPSMTmzd8frrr1tGW6B2SDo1NZXg4OBmb7tRWlBKenI6AeEBOLk5tVRkkbN24MABzj///DojHGZri5laQlFRES4uLtTU1HDzzTfj6+vLkiVLzI51ipb4nicdw9fvfs3F113M+nfWM3HmxDbXX3NoDlEDzrS5a0uws7PDBZfTztcQkY5v1qxZHDhwgLKyMgYPHmzK/D2RpvDy8GIMY/Dy8GqR/vy8/ZjKVPy8/Vqkv+bQT+EG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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_bkg_poisson_error = np.zeros((2,len(expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents))))\n",
    "fit_bkg_gaussian_error = np.zeros(len(expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents)))\n",
    "inj_bkg_poisson_error = np.zeros((2,len(grb_bkg.binned_data.project('Em').todense().contents)))\n",
    "inj_bkg_gaussian_error = np.zeros(len(grb_bkg.binned_data.project('Em').todense().contents))\n",
    "\n",
    "for i, counts in enumerate(expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents)):\n",
    "    if counts > 5:\n",
    "        fit_bkg_gaussian_error[i] = np.sqrt(counts)\n",
    "    else:\n",
    "        poisson_error = poisson_conf_interval(counts, interval=\"frequentist-confidence\", sigma=1)\n",
    "        fit_bkg_poisson_error[0][i] = poisson_error[0]\n",
    "        fit_bkg_poisson_error[1][i] = poisson_error[1]\n",
    "\n",
    "for i, counts in enumerate(grb_bkg.binned_data.project('Em').todense().contents):\n",
    "    if counts > 5:\n",
    "        inj_bkg_gaussian_error[i] = np.sqrt(counts)\n",
    "    else:\n",
    "        poisson_error = poisson_conf_interval(counts, interval=\"frequentist-confidence\", sigma=1)\n",
    "        inj_bkg_poisson_error[0][i] = poisson_error[0]\n",
    "        inj_bkg_poisson_error[1][i] = poisson_error[1]\n",
    "        \n",
    "fig,ax = plt.subplots()\n",
    "\n",
    "ax.stairs(expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents), binned_energy_edges, color='purple', label = \"Best fit convolved with response plus background\")\n",
    "ax.errorbar(binned_energy, expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents), yerr=fit_bkg_poisson_error, color='purple', linewidth=0, elinewidth=1)\n",
    "ax.errorbar(binned_energy, expectation.project('Em').todense().contents+(bkg_par.value * bkg.binned_data.slice[{'Time':slice(bkg_min,bkg_max)}].project('Em').todense().contents), yerr=fit_bkg_gaussian_error, color='purple', linewidth=0, elinewidth=1)\n",
    "ax.stairs(grb_bkg.binned_data.project('Em').todense().contents, binned_energy_edges, color = 'black', ls = \":\", label = \"Total counts\")\n",
    "ax.errorbar(binned_energy, grb_bkg.binned_data.project('Em').todense().contents, yerr=inj_bkg_poisson_error, color='black', linewidth=0, elinewidth=1)\n",
    "ax.errorbar(binned_energy, grb_bkg.binned_data.project('Em').todense().contents, yerr=inj_bkg_gaussian_error, color='black', linewidth=0, elinewidth=1)\n",
    "\n",
    "ax.set_xscale(\"log\")\n",
    "ax.set_yscale(\"log\")\n",
    "\n",
    "ax.set_xlabel(\"Energy (keV)\")\n",
    "ax.set_ylabel(\"Counts\")\n",
    "\n",
    "ax.legend()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
